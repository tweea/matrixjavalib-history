1、获取日期
	本项目中使用 "yyyy-MM-dd" 作为日期的标准格式
2、用统一的 Log 框架代替 System.out.println() 和 e.printTraceStack()
	Log 的级别为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL
	Log 中的信息要简洁并有意义
	根据 Log 级别及日志输出语句复杂度，在日志输出语句前加入判断当前日志级别，减少不必要的资源开销。

	if(LOGGER.isTraceEnabled()){
		LOGGER.trace("some info");
	}

3、将立即数或已知量放在前面防止错误
	用 "abc".equals(itemName) 代替 itemName.equals("abc")
	用 if(true == flag) 代替 if(flag == true)
4、多次拷贝字符串
	测试所不能发现的一个错误是生成不可变(immutable)对象的多份拷贝。不可变对象是不可改变的，因此不需要拷贝它。
	最常用的不可变对象是String。如果你必须改变一个String对象的内容，你应该使用StringBuffer（同步） 或 StringBuilder（非同步）。
	下面的代码会正常工作：
 
	String temp = new String("Text here"); // 匿名字符串对象
	String s = new String(temp); // 命名字符串对象
 
	但是，这段代码性能差，而且没有必要这么复杂。你还可以用以下的方式来重写上面的代码：
 
	String temp = "Text here";
	String s = temp;

	当然现代编译器会自动优化一些字符串拼接的情形，如：

	String s = "a" + "b";

	会被优化为如下形式

	String s = new StringBuilder("a").append("b").toString();

	但仍需注意上述优化手段。
5、没有克隆(clone)返回的对象
	封装(encapsulation)是面向对象编程的重要概念。不幸的是，Java为不小心打破封装提供了方便——Java允许返回私有数据的引用(reference)。下面的代码揭示了这一点：

	import java.awt.Dimension;

	/**
	  *	Example class. The x and y values should never
	  * be negative.
	  */
	public class Example
	{
		private Dimension d = new Dimension(0, 0);

		public Example()
		{
		}
 
		/**
		  * Set height and width. Both height and width must be	nonnegative
		  * or an exception is thrown.
		  */
		public synchronized void setValues(int height, int width)
			throws IllegalArgumentException
		{
			if(height < 0 || width < 0){
				throw new IllegalArgumentException();
			}
			d.height = height;
			d.width = width;
		}
 
		public synchronized Dimension getValues()
		{
			// Ooops! Breaks encapsulation
			return d;
		}
	}

	Example类保证了它所存储的height和width值永远非负数，试图使用setValues()方法来设置负值会触发异常。不幸的是，由于getValues()返回d的引用，而不是d的拷贝，你可以编写如下的破坏性代码：

	Example ex = new Example();
	Dimension d = ex.getValues();
	d.height = -5;
	d.width = -10;

	现在，Example对象拥有负值了！如果getValues() 的调用者永远也不设置返回的Dimension对象的width和height值，那么仅凭测试是不可能检测到这类的错误。

	不幸的是，随着时间的推移，客户代码可能会改变返回的Dimension对象的值，这个时候，追寻错误的根源是件枯燥且费时的事情，尤其是在多线程环境中。

	更好的方式是让getValues()返回拷贝：

	public synchronized Dimension getValues()
	{
		return new Dimension(d.x, d.y);
	}

	现在，Example对象的内部状态就安全了。调用者可以根据需要改变它所得到的拷贝的状态，但是要修改Example对象的内部状态，必须通过setValues()才可以。
6、不必要的克隆
	我们现在知道了get方法应该返回内部数据对象的拷贝，而不是引用。但是，事情没有绝对：

	/**
	  * Example class.The value should never
	  * be negative.
	  */
	public class Example
	{
		private Integer i = 0;

		public Example()
		{
		}

		/**
		  * Set x. x must be nonnegative
		  * or an exception will be thrown
		  */
		public synchronized void setValues(int x)
			throws IllegalArgumentException
		{
			if(x < 0){
				throw new IllegalArgumentException();
			}
			i = new Integer(x);
		}
 
		public synchronized Integer getValue()
		{
			// We can’t clone Integers so we makea copy this way.
			return new Integer(i.intValue());
		}
	}

	这段代码是安全的，但是就象在错误1#那样，又作了多余的工作。Integer对象，就象String对象那样，一旦被创建就是不可变的。因此，返回内部Integer对象，而不是它的拷贝，也是安全的。

	方法getValue()应该被写为：

	public synchronized Integer getValue()
	{
		// ’i’ is immutable, so it is safe to return it instead of a copy.
		return i;
	}

	Java程序比C++程序包含更多的不可变对象。JDK 所提供的若干不可变类包括：

	•Boolean
	•Byte
	•Character
	•Class
	•Double
	•Float
	•Integer
	•Long
	•Short
	•String
	•大部分的Exception的子类
7、自编代码来拷贝数组
	Java 允许你克隆数组，但是开发者通常会错误地编写如下的代码，问题在于如下的循环用三行做的事情，如果采用 System 的 arraycopy 方法用一行就可以完成：

	public class Example
	{
		private int[] copy;

		/**
		  * Save a copy of ’data’. ’data’ cannot be null.
		  */
		public void saveCopy(int[] data)
		{
			copy = new int[data.length];
			for(int i = 0; i < copy.length; ++i){
				copy[i] = data[i];
			}
		}

		这段代码是正确的，但却不必要地复杂。saveCopy()的一个更好的实现是：

		void saveCopy(int[] data)
		{
			copy = new int[data.length];
			System.arraycopy(data, 0, copy, 0, data.length);
		}

		如果你经常克隆数组，编写如下的一个工具方法会是个好主意：
 
		static int[] cloneArray(int[] data)
		{
			int[] copy = new int[data.length];
			System.arraycopy(data, 0, copy, 0, data.length);
			return copy;
		}

		这样的话，我们的saveCopy看起来就更简洁了：

		void saveCopy(int[] data)
		{
			copy = cloneArray(data);
		}

		目前 Apache commons-lang 工具包已提供了这样的工具方法

		import org.apache.commons.lang3.ArrayUtils;

		void saveCopy(int[] data)
		{
			copy = ArrayUtils.clone(data);
		}

		在 JavaSE 6 中也提供了这样的方法

		import java.util.Arrays;

		void saveCopy(int[] data)
		{
			copy = Arrays.copyOf(data, data.length);
		}

8、拷贝错误的数据
	有时候程序员知道必须返回一个拷贝，但是却不小心拷贝了错误的数据。由于仅仅做了部分的数据拷贝工作，下面的代码与程序员的意图有偏差：

	import java.awt.Dimension;
	import java.util.Arrays;

	/**
	  * Example class. The height and width values should never
	  * be negative.
	  */
	public class Example
	{
		static final public int TOTAL_VALUES = 10;

		private Dimension[] d = new Dimension[TOTAL_VALUES];

		public Example()
		{
		}

		/**
		  * Set height and width. Both height and width must be nonnegative
		  * or an exception will be thrown.
		  */
		public synchronized void setValues(int index, int height, int width)
			throws IllegalArgumentException
		{
			if(height < 0 || width < 0){
				throw new IllegalArgumentException();
			}
			if(d[index] == null){
				d[index] = new Dimension();
				d[index].height = height;
				d[index].width = width;
			}

		public synchronized Dimension[] getValues()
		{
			return Arrays.copyOf(d, d.length);
		}
	}

	这儿的问题在于getValues()方法仅仅克隆了数组，而没有克隆数组中包含的Dimension对象，因此，虽然调用者无法改变内部的数组使其元素指向不同的Dimension对象，但是调用者却可以改变内部的数组元素(也就是Dimension对象)的内容。方法getValues()的更好版本为：

	public synchronized Dimension[] getValues()
	{
		Dimension[] copy = new Dimension[d.length];
		for(int i = 0; i < copy.length; ++i)
		{
			// NOTE: Dimension isn’t cloneable.
			if (d != null)
				copy[i] = new Dimension (d[i].height, d[i].width);
		}
		return copy;
	}

	在克隆原子类型数据的多维数组的时候，也会犯类似的错误。原子类型包括int,float等。简单的克隆int型的一维数组是正确的，如下所示：

	public void store(int[] data)
	{
		this.data = Arrays.copyOf(data, data.length);
		// OK
	}

	拷贝int型的二维数组更复杂些。Java没有int型的二维数组，因此一个int型的二维数组实际上是一个这样的一维数组：它的类型为int[]。简单的克隆int[][]型的数组会犯与上面例子中getValues()方法第一版本同样的错误，因此应该避免这么做。下面的例子演示了在克隆int型二维数组时错误的和正确的做法：

	public void wrongStore(int[][] data)
	{
		this.data = Arrays.copyOf(data, data.length); // Not OK!
	}

	public void rightStore(int[][] data)
	{
		// OK!
		this.data = new int[][data.length];
		for(int i = 0; i < data.length; ++i){
			if(data[i] != null){
				this.data[i] = Arrays.copyOf(data[i], data[i].length);
			}
		}
	}

9、检查 new 操作的结果是否为 null
	Java 编程新手有时候会检查new操作的结果是否为null。可能的检查代码为：

	Integer i = new Integer(400);
	if(i == null){
		throw new NullPointerException();
	}

	检查当然没什么错误，但却不必要，if和throw这两行代码完全是浪费，他们的唯一功用是让整个程序更臃肿，运行更慢。

	C/C++程序员在开始写java程序的时候常常会这么做，这是由于检查C中malloc()的返回结果是必要的，不这样做就可能产生错误。检查C++中new操作的结果可能是一个好的编程行为，这依赖于异常是否被使能(许多编译器允许异常被禁止，在这种情况下new操作失败就会返回null)。在java中，new 操作不允许返回null，如果真的返回null，很可能是虚拟机崩溃了，这时候即便检查返回结果也无济于事。

10、用 == 替代 equals 方法
	在Java中，有两种方式检查两个数据是否相等：通过使用==操作符，或者使用所有对象都实现的.equals方法。原子类型(int, flosat, char 等)不是对象，因此他们只能使用==操作符，如下所示：

	int x = 4;
	int y = 5;
	if(x == y){
		System.out.println ("Hi");
	}
	// This ’if’ test won’t compile.
	if(x.equals(y)){
		System.out.println ("Hi");
	}

	对象更复杂些，==操作符检查两个引用是否指向同一个对象，而equals方法则实现更专门的相等性检查。
	更显得混乱的是由java.lang.Object 所提供的缺省的equals方法的实现使用==来简单的判断被比较的两个对象是否为同一个。
	许多类覆盖了缺省的equals方法以便更有用些，比如String类，它的equals方法检查两个String对象是否包含同样的字符串，而Integer的equals方法检查所包含的int值是否相等。
 
	大部分时候，在检查两个对象是否相等的时候你应该使用equals方法，而对于原子类型的数据，你用该使用==操作符。
 
11、混淆原子操作和非原子操作
	Java保证读和写32位数或者更小的值是原子操作，也就是说可以在一步完成，因而不可能被打断，因此这样的读和写不需要同步。以下的代码是线程安全(thread safe)的：

	public class Example
	{
		private int value; // More code here...

		public void set(int x)
		{
			// NOTE: No synchronized keyword
			this.value = x;
		}
	}

	不过，这个保证仅限于读和写，下面的代码不是线程安全的：

	public void increment()
	{
		// This is effectively two or three instructions:
		// 1) Read current setting of ’value’.
		// 2) Increment that setting.
		// 3) Write the new setting back.
		++this.value;
	}

	在测试的时候，你可能不会捕获到这个错误。首先，测试与线程有关的错误是很难的，而且很耗时间。其次，在有些机器上，这些代码可能会被翻译成一条指令，因此工作正常，只有当在其它的虚拟机上测试的时候这个错误才可能显现。因此最好在开始的时候就正确地同步代码：

	public synchronized void increment()
	{
		++this.value;
	}

12、在catch 块中作清除工作
	一段在catch块中作清除工作的代码如下所示：

	OutputStream os = null;
	try{
		os = new OutputStream();
		// Do something with os here.
		os.close();
	}catch(Exception e){
		if(os != null){
			os.close();
		}
	}

	尽管这段代码在几个方面都是有问题的，但是在测试中很容易漏掉这个错误。下面列出了这段代码所存在的三个问题：

	1．语句os.close()在两处出现，多此一举，而且会带来维护方面的麻烦。
	2．上面的代码仅仅处理了Exception，而没有涉及到Error。但是当try块运行出现了Error，流也应该被关闭。
	3．close()可能会抛出异常。

	上面代码的一个更优版本为：

	OutputStream os = null;
	try{
		os = new OutputStream();
		// Do something with os here.
	}finally{
		if(os != null){
			os.close();
		}
	}

	这个版本消除了上面所提到的两个问题：代码不再重复，Error也可以被正确处理了。但是没有好的方法来处理第三个问题，也许最好的方法是把close()语句单独放在一个try/catch块中。
 
13、增加不必要的catch 块
	一些开发者听到try/catch块这个名字后，就会想当然的以为所有的try块必须要有与之匹配的catch块。
	C++程序员尤其是会这样想，因为在C++中不存在finally块的概念，而且try块存在的唯一理由只不过是为了与catch块相配对。

	增加不必要的catch块的代码就象下面的样子，捕获到的异常又立即被抛出：

	try{
		// Nifty code here
	}catch(Exception e){
		throw e;
	}finally{
		// Cleanup code here
	}

	不必要的catch块被删除后，上面的代码就缩短为：

	try{
		// Nifty code here
	}finally{
		// Cleanup code here
	}

14、没有正确实现equals，hashCode，或者clone 等方法
	方法equals，hashCode，和clone由java.lang.Object提供的缺省实现是正确的。不幸地是，这些缺省实现在大部分时候毫无用处，因此许多类覆盖其中的若干个方法以提供更有用的功能。但是，问题又来了，当继承一个覆盖了若干个这些方法的父类的时候，子类通常也需要覆盖这些方法。在进行代码审查时，应该确保如果父类实现了equals，hashCode，或者clone等方法，那么子类也必须正确。正确的实现equals，hashCode，和clone需要一些技巧。

