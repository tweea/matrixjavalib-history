排版规范
1 单目操作符与操作数之间不加空格，双目操作符两侧加一空格，取成员操作符不加空格。
  大中小括号内侧不加空格，括号间不加空格，关键字与括号间加一空格。
2 相对独立的程序块与块之间加一空行。空行尽量为一行。
3 较长的语句、表达式等要分成多行书写。划分出的新行要进行适应的缩进，使排版整齐，语句可读。
  长表达式要在低优先级操作符处划分新行，操作符放在新行之首。
  循环、判断等语句中若有较长的表达式或语句，则要进行适应的划分。
  若函数或过程中的参数较长，则要进行适当的划分。
  以上缩进用空格，其他用制表符（四字符宽度）。
4 不允许把多个短语句写在一行中，即一行只写一条语句。
5 结构的定义及循环、判断等语句中的代码都要采用缩进风格。
	if (a == b) {
		x = 2;
	} else {
		x = 1;
	}

	for (int i = 0; i < 4; i++) {
	}

	do {
	} while (flag);

	while (flag) {
	}

	switch (a) {
	case 1:
		b = 2;
		break;
	default:
	}

	try {
	} catch (Exception e) {
	} finally {
	}
6 用大括号‘{’和‘}’界定程序块时‘{’和‘}’应各独占一行并且位于同一列，
  同时与引用它们的语句左对齐。
	a = b;
	{
		x = 2;
	}

	class A
		implements B {
	}
7 inner class 多缩进一个制表符。
8 文档化
  必须用 javadoc 来为类生成文档。不仅因为它是标准，这也是被各种 java 编译器都认可的方法。
  使用 @author 标记是不被推荐的，因为代码不应该是被个人拥有的。
9 命名
  在大部分情况下不需使用匈牙利表示法 

  Package 的命名
    Package 的名字应该都是由一个小写单词组成。 

	package com.neu.util

  Class 的命名 
    Class 的名字必须由大写字母开头而其他字母都小写的单词组成，对于所有标识符，
	其中包含的所有单词都应紧靠在一起，而且大写中间单词的首字母。

	public class ThisAClassName {
	}

  Class 变量的命名 
    变量的名字必须用一个小写字母开头。后面的单词用大写字母开头

	userName, thisAClassMethod

  Static Final 变量的命名
    static final 变量的名字应该都大写，并且指出完整含义。

	/**
	 * DBConfig PATH
	 */
	public static final String DB_CONFIG_FILE_PATH ="com.neu.etrain.dbconfig";

  参数的命名 
    参数的名字必须和变量的命名规范一致。 
    使用有意义的参数命名，如果可能的话，使用和要赋值的字段一样的名字： 

	setCounter(int size) {
		this.size = size;
	}

  数组的命名 
    数组应该总是用下面的方式来命名： 

	byte[] buffer;

    而不是： 

	byte buffer[];
10 泛型
  变量尽量使用泛型声明，以明确类型信息减少编码错误
11 标记
  @Deprecated
  @Override
  使用标注防止因疏忽产生的编码错误

